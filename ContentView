//
//  ContentView.swift
//  LocalFiles
//
//  Created by JV on 6/11/25.
//

import SwiftUI
import UniformTypeIdentifiers

struct ContentView: View {
    @StateObject private var audioManager = AudioPlayerManager()
    @State private var songs: [Song] = []
    @State private var showImporter = false
    @State private var selectedSong: Song?

    private var documentsURL: URL {
        FileManager.default
            .urls(for: .documentDirectory, in: .userDomainMask)
            .first!
    }

    var body: some View {
        TabView {
            NavigationView {
                VStack {
                    Button("Import Songs") {
                        showImporter = true
                    }
                    .padding()

                    List(songs) { song in
                        Button {
                            selectedSong = song
                            audioManager.playSong(song)
                        } label: {
                            HStack {
                                Image(uiImage: song.artwork ?? UIImage(systemName: "music.note")!)
                                    .resizable()
                                    .scaledToFit()
                                    .frame(width: 50, height: 50)
                                    .cornerRadius(4)
                                VStack(alignment: .leading) {
                                    Text(song.title)
                                        .font(.headline)
                                    Text(song.artist)
                                        .font(.subheadline)
                                        .foregroundColor(.secondary)
                                }
                            }
                        }
                    }
                }
                .navigationTitle("Library")
                .onAppear(perform: loadSongs)
                .fileImporter(
                    isPresented: $showImporter,
                    allowedContentTypes: [.mp3, .mpeg4Audio],
                    allowsMultipleSelection: true
                ) { result in
                    handleImport(result: result)
                }
            }
            .tabItem {
                Label("Library", systemImage: "music.note.list")
            }

            NowPlayingView(audioManager: audioManager, song: selectedSong)
                .tabItem {
                    Label("Now Playing", systemImage: "play.circle")
                }
        }
    }

    private func loadSongs() {
        let allFiles = (try? FileManager.default
            .contentsOfDirectory(at: documentsURL,
                                 includingPropertiesForKeys: nil)) ?? []
        songs = allFiles
            .filter { ["mp3", "m4a"].contains($0.pathExtension.lowercased()) }
            .map(Song.init)
    }

    private func handleImport(result: Result<[URL], Error>) {
        showImporter = false
        switch result {
        case .success(let urls):
            for url in urls {
                let dest = documentsURL.appendingPathComponent(url.lastPathComponent)
                if !FileManager.default.fileExists(atPath: dest.path) {
                    do {
                        try FileManager.default.copyItem(at: url, to: dest)
                    } catch {
                        print("Copy failed:", error)
                    }
                }
            }
            loadSongs()
        case .failure(let error):
            print("Import error:", error)
        }
    }
}
